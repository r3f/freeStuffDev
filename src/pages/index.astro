---
import { getCollection } from 'astro:content'
import Layout from '../layouts/Layout.astro'
import Card from '../components/Card.astro'
import Header from '../components/Header.astro'
import Sponsors from '../components/Sponsors.astro'

// 获取所有工具集合，非付费
const tools = await getCollection('tools', ({data}) => {
	return data.isPaid !== true
})

// 随机化列表
tools.sort(() => Math.random() - 0.5)

const title="免费的开发者工具和服务"
const description="由开发者为开发者提供的免费工具列表。这是一个有用的服务集合，可用于您的下一个 MVP 或原型设计。"

---

<Layout
	title={title}
	description={description}
	>

	<Header
		title={title}
		description={description}
		/>

	<Sponsors />

	<p class="text-xl mb-3">免费开发工具 👇🏼</p>
	

	<div class="flex justify-between items-center space-x-5">
		<div class="w-full">
			<input 
				class="bg-gray-700 text-white text-sm rounded-md w-full border border-white p-2"
				type="text"
				placeholder="在此搜索任何内容..."
				id="searchbox">
		</div>

			
		<div class="flex justify-end items-center w-[200px]">
			<label for="sort" class="text-sm">排序方式：</label>
			<select id="sort" 
				class="bg-gray-800 text-white text-sm rounded-md ml-2 border border-white p-2">
				<option value="random">随机</option>
				<option value="newest">最新</option>
			</select>

			<script>
				document.getElementById('sort')?.addEventListener('change', (e) => {
					if(!e.target) return

					const sort = (e.target as any).value
					if (sort === 'newest') {
						location.href = '/recent'
					} else {
						location.href = '/'
					}
				})
			</script>
		</div>
	</div>

	<div class="mt-10">
		{
			tools.map((tool) => (
				<Card tool={tool} />
			))
		}
	</div>

	<!-- 重要提示：位置在卡片之后 -->
	<script is:inline>
		function initSearch() {
			const cards = document.querySelectorAll('.cards')
			// 稍作延迟
			let typingTimer;        
			let typeInterval = 500; // 半秒
			let searchInput = document.getElementById('searchbox');

			searchInput.addEventListener('keyup', () => {
				clearTimeout(typingTimer);
				typingTimer = setTimeout(liveSearch, typeInterval);
			});
			
			function liveSearch() {
				const searchQ = searchInput.value
				for (var i = 0; i < cards.length; i++) {
					if(cards[i].textContent.toLowerCase()
							.includes(searchQ.toLowerCase())) {
						cards[i].classList.remove("hidden");
					} else {
						cards[i].classList.add("hidden");
					}
				}
			}
		}
		
		document.addEventListener('DOMContentLoaded', initSearch)
		document.addEventListener('astro:after-swap', initSearch)
	</script>

</Layout>
